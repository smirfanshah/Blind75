
###Python coding practice for coding interviews

--------------------------------------------Problem 2:

Gloria the bunny finds herself once again amidst an array game. This time, however, the game has slightly intensified with a third array coming into play. Your task is to develop a Python function to maneuver Gloria through her quest, yielding the summation of the maximum values she encounters from arrayB and arrayC together.

Gloria's journey begins at the first element of arrayA. Gloria's movement pattern follows a fixed sequence that repeats: arrayA -> arrayB -> arrayA -> arrayC. In other words, Gloria always alternates between arrayA and either arrayB or arrayC, following this pattern:

First hop: arrayA to arrayB
Second hop: arrayB to arrayA
Third hop: arrayA to arrayC
Fourth hop: arrayC to arrayA
Then the pattern starts over, continuing until the journey ends.

The rule to decide Gloria's move is: She uses the current element's value in the array as an index for her next array. For example, if Gloria is at arrayA[1]=2, she would move to arrayB[2].

The pattern repeats itself until one of the following occurs:

Gloria's path repeats by visiting a position in arrayB or arrayC that was already visited, indicating that she is stuck in a loop and cannot progress further, OR
Gloria tries to access an index that exceeds the length of an array (for example, attempting to access arrayA[4] when arrayA only contains 4 items indexed from 0 to 3), in which case Gloria's journey should also stop.
Your task is to calculate the sum of the maximum values that Gloria encounters in arrayB and arrayC during her journey.

Each input array consists of n items, where n ranges from 
1
1 to 
100
100, inclusive. Every item in the arrays is a non-negative integer and falls within the range of 
0
0 to 
99
99, inclusive.

--------------------------------------Probelm 3:

Alice loves to play a jumping game on two parallel roads, roadA and roadB, each filled with integers. The game begins with Alice choosing a starting point on roadA, and then moving according to the following rules:

Alice chooses a starting point on roadA.
Each element in both the roads dictate exactly where to jump on the other road. If Alice is at the 
i
i-th position of roadA, where roadA[
i
i] = 
x
x, then Alice moves to the 
x
x-th position of roadB. Likewise, if Alice is at the 
i
i-th position of roadB, where roadB[
i
i] = 
y
y, then she moves to the 
y
y-th position of roadA.
Alice continues these jumps until she ends up at an already visited spot on either road in the current route, which signifies the end of this game. It's important to note that if a spot was visited in a previous route but not in the current route, it is not considered as an already visited spot.
The distance covered in each jump is defined as 1 unit, no matter where she jumps to on the other road.
Your task is to create a function that receives these two roads, roadA and roadB, as its parameters. The function should calculate and return an array of total distances Alice covers during her game for each possible starting point on roadA. More specifically, the result should be an array results, where results[i] denotes the total distance covered if Alice starts from roadA[i].

The two input lists, roadA and roadB, contain 
n
n and 
m
m number of elements respectively. The number of elements in each list can range from 1 to 100, inclusive. Each element in roadA can have a value ranging from 0 to 
m
−
1
m−1, inclusive. Similarly, each element in roadB can have a value ranging from 0 to 
n
−
1
n−1, inclusive. This ensures that any element in either of the lists will be a valid index in the other list.


---------------------------------------------Problem 4:
Mike is fascinated by numbers and operations, having devised a unique number encoding scheme. Given an array numbers consisting of n integers, where n ranges from 
1
1 to 
100
100 inclusive, Mike undertakes the following operations:

For each number in the array that is not a multiple of 
10
10, he increases it by 
1
1.
For each number that is a multiple of 
10
10, he assigns it a value of 
1
1.
Following these operations, Mike calculates the frequency of each number in the new array. Subsequently, he establishes an association between each number and its frequency. This association maps the number to a product, defined as the multiplication of the number itself by its frequency.

Your task is to generate a list that encompasses these products, organized in ascending order. Each number in the array numbers spans from 
−
100
−100 to 
100
100, inclusive.

For example, given the input array numbers = [5, 10, 15, 10, 5, 15], after applying Mike's operations, we have a resulting array of [6, 1, 16, 1, 6, 16]. The frequency of each number is 6: 2, 1: 2, 16: 2. The corresponding products (number * frequency) are 6*2 = 12, 1*2 = 2, and 16*2 = 32. Therefore, the output is [2, 12, 32], sorted in ascending order.